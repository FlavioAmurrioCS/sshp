#!/usr/bin/env bash
#
# very simple test for sshp just to verify some basic behavior
#
# Author: Dave Eddy <dave@daveeddy.com>
# Date: April 14, 2021
# License: MIT

hostfile=$1

# colors
[[ -t 1 ]] || tput() { true; }
red=$(tput setaf 1)
grn=$(tput setaf 2)
bld=$(tput bold)
rst=$(tput sgr0)

#
# print a message to stderr and exit with failure
fatal() {
	echo "$@" >&2
	exit 1
}

#
# sshp wrapper to call the compiled version
sshp() {
	../sshp "$@"
}

#
# Verify that a command runs and exits with the expected code.
#
# Usage: verify <code> <cmd> [args ...]
#
# Example:
#
# verify 0 true
# verify 5 sh -c 'exit 5'
verify() {
	local code
	local want=$1
	local output

	shift

	echo -n "$bld$*$rst  exits $want ... "
	output=$("$@" 2>&1)
	code=$?

	if ((code == want)); then
		echo "${grn}ok$rst"
	else
		echo "${red}failed!$rst"
		echo '- program output -'
		echo "$output"
		exit 1
	fi
}

[[ -n $hostfile ]] || fatal 'host file must be passed as arg 1'
[[ -f $hostfile ]] || fatal "$hostfile doesn't exist"

# -v should just exit 0
verify 0 sshp -v

# -h should just exit 0
verify 0 sshp -h

# no arguments is a user error
verify 2 sshp

# bad hosts file
verify 2 sshp -f / cmd
verify 2 sshp -f /should-not-exist cmd

# no hosts specified is currently an error
verify 2 sshp -f /dev/null cmd

# invalid max parallelism
verify 2 sshp -m
verify 2 sshp -m 0
verify 2 sshp -m foo
verify 2 sshp -m -17

# invalid mode combinations
verify 2 sshp -g -j

# do a dry run
verify 0 sshp -n -f "$hostfile" cmd
verify 0 sshp -n -f - cmd < "$hostfile"
verify 0 sshp -n cmd < "$hostfile"

exit 0
